<div class="container" style="max-width:900px;margin:32px auto;padding:16px;color:white;font-family:sans-serif;">
  <h2>Anoma Intent Demo</h2>
  <p style="opacity:0.7;margin-bottom:12px">Compose your intent, watch real-time status & mini upward trend!</p>
  
  <.form let={f} for={:intent} phx-submit="compose">
    <%= textarea f, :text, placeholder: "Write your intent...", style: "width:100%;height:80px;padding:8px;margin-bottom:12px;border-radius:6px;background:#0b1220;color:white;border:none;box-shadow:0 2px 8px rgba(0,0,0,0.3)" %>
    <%= submit "Cast Intent", style: "padding:10px 16px;border-radius:8px;background:linear-gradient(90deg,#8b5cf6,#06b6d4);border:none;color:white;font-weight:600;cursor:pointer;transition:transform 0.2s;" %>
  </.form>

  <div style="margin-top:24px;display:flex;gap:16px;">
    <div style="flex:1;">
      <h3>Recent Intents</h3>
      <ul style="list-style:none;padding:0">
        <%= for intent <- @intents do %>
          <li style="padding:8px 12px;margin-bottom:6px;background:rgba(255,255,255,0.05);border-radius:6px;display:flex;justify-content:space-between;align-items:center;animation:fadeIn 0.5s;">
            <span><strong><%= intent.text %></strong></span>
            <span style="opacity:0.7"><%= intent.status %></span>
          </li>
        <% end %>
      </ul>
    </div>
    <div style="width:200px;">
      <h3>Mini Trend</h3>
      <canvas id="trend" width="200" height="120" style="border-radius:6px;background:rgba(255,255,255,0.05)"></canvas>
      <p style="opacity:0.6;font-size:12px;margin-top:4px">Trend is simulated for fun âœ¨</p>
    </div>
  </div>

  <div style="margin-top:24px;background:rgba(255,255,255,0.02);padding:12px;border-radius:8px;height:120px;overflow:auto;" id="activity-log">
    <strong style="opacity:0.7">Activity Log</strong>
  </div>
</div>

<style>
@keyframes fadeIn { from {opacity:0} to {opacity:1} }
</style>

<script>
let canvas = document.getElementById('trend');
let ctx = canvas.getContext('2d');

function drawTrend() {
  ctx.clearRect(0,0,canvas.width,canvas.height);
  let pts=[], x=0, val=0.1;
  for(let i=0;i<40;i++){ val+=Math.random()*0.05; pts.push({x:x,y:val}); x+=canvas.width/40; }
  ctx.beginPath(); ctx.moveTo(0, canvas.height - pts[0].y*canvas.height*0.6);
  for(let i=1;i<pts.length;i++) ctx.lineTo(pts[i].x, canvas.height - pts[i].y*canvas.height*0.6);
  let grad = ctx.createLinearGradient(0,0,canvas.width,0); grad.addColorStop(0,'#8b5cf6'); grad.addColorStop(1,'#06b6d4');
  ctx.strokeStyle = grad; ctx.lineWidth=4; ctx.stroke();
  for(let p of pts){ ctx.beginPath(); ctx.arc(p.x, canvas.height - p.y*canvas.height*0.6,3,0,Math.PI*2); ctx.fillStyle='rgba(255,255,255,0.2)'; ctx.fill(); }
}

drawTrend();
setInterval(drawTrend, 3000);

const logEl = document.getElementById('activity-log');
let intents = [];

function addLog(txt){ let d = document.createElement('div'); d.textContent = `[${new Date().toLocaleTimeString()}] ${txt}`; logEl.prepend(d); }

document.querySelector('form').addEventListener('submit', e=>{
  e.preventDefault();
  const text = e.target.querySelector('textarea').value.trim();
  if(!text) return;
  const intent = {text, status:'Pending'};
  intents.unshift(intent); addLog(`Intent submitted: ${text}`);
  e.target.querySelector('textarea').value='';
  simulateLifecycle(intent);
});

function simulateLifecycle(intent){
  setTimeout(()=>{ intent.status='Discovering'; addLog(`Intent discovering fulfillers: ${intent.text}`); }, 1000);
  setTimeout(()=>{ intent.status='Fulfilling'; addLog(`Intent fulfilling off-chain: ${intent.text}`); }, 2500);
  setTimeout(()=>{ intent.status='Anchored'; addLog(`Intent anchored on-chain: ${intent.text}`); }, 4500);
  setTimeout(()=>{ intent.status='Fulfilled'; addLog(`Intent fulfilled: ${intent.text}`); }, 6500);
}
</script>
